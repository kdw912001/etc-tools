package test.list;
import java.util.*;
//Person 객체들을 name 필드 기준 오름차순 정렬 처리할 클래스
public class NameAscending implements Comparator{
	@Override
	public int compare(Object o1, Object o2) {
		//정렬 기준이 되는 필드에 대한 조건처리
		int result = 0;
		
		if(o1 instanceof Person && o2 instanceof Person) {
			Person p1 = (Person)o1;
			Person p2 = (Person)o2;
			
			//name 필드값을 비교해서
			//두 이름이 같으면 0
			//앞 객체의 이름이 크면 1
			//뒤 객체의 이름이 크면 -1 리턴 처리
			if(p1.getName().compareTo(p2.getName()) > 0) {//>0앞 글자가 큰지
				result = 1;
			}else if(p1.getName().compareTo(p2.getName())<0) {
				result = -1;
			}
		}
		return result;
	}
}
package test.list;
import java.util.Comparator;
public class NameDescending implements Comparator{
	@Override
	public int compare(Object o1, Object o2) {
		//정렬 기준이 되는 필드에 대한 조건처리
		int result = 0;
		if(o1 instanceof Person && o2 instanceof Person) {
			Person p1 = (Person)o1;
			Person p2 = (Person)o2;
			
			//name 필드값을 비교해서
			//두 이름이 같으면 0
			//앞 객체의 이름이 크면 1
			//뒤 객체의 이름이 크면 -1 리턴 처리
			if(p1.getName().compareTo(p2.getName()) > 0) {//>0앞 글자가 큰지
				result = -1;
			}else if(p1.getName().compareTo(p2.getName())<0) {
				result = 1;
			}
		}
		return result;
	}
}

package test.list;
import java.util.Comparator;
public class PointAscending implements Comparator{
	@Override
	public int compare(Object o1, Object o2) {
		//Person 의 point 필드 기준 오름차순 정렬
		int result = 0;
		
		//Object를 형변환
		if(o1 instanceof Person && o2 instanceof Person) {
			Person p1 = (Person)o1;
			Person p2 = (Person)o2;
			
			if(p1.getPoint() > p2.getPoint())
				result = 1; 
			if(p1.getPoint() < p2.getPoint())
				result = -1;
			if(p1.getPoint() == p2.getPoint())
				result = 0;
		}
		return result;
	}
}
package test.list;
import java.util.*;
public class PointDescending implements Comparator{
	@Override
	public int compare(Object o1, Object o2) {
		//Person 의 point 필드 기준 오름차순 정렬
		int result = 0;
		
		//Object를 형변환
		if(o1 instanceof Person && o2 instanceof Person) {
			Person p1 = (Person)o1;
			Person p2 = (Person)o2;
			
			if(p1.getPoint() > p2.getPoint())
				result = 1; 
			if(p1.getPoint() < p2.getPoint())
				result = -1;
			if(p1.getPoint() == p2.getPoint())
				result = 0;
		}
		
		return -result;//오름차순과 반대값
	}
}
package test.list;
import java.util.*;
public class TestPersonArrayList2 {

	public static void main(String[] args) {
		// Generic 사용 테스트
		//Generic은 선언한 클래스 외의 다른 클래스 타입은 저장할 수 없음->에러
		//오직 제한한 클래스만 사용 가능
		ArrayList<Person> list; //Person만 저장할 수 있는 list
		/*list = new ArrayList<Person>(); */
		//한번 제네릭 붙으면 레퍼런스 변수 선언, 생성 모두 제네릭 타입 명시
		
		list = addMethod(/*list*/);
		printList(list);
		System.out.println("---------------");
		list.sort(new NameAscending());
		printList(list);
		System.out.println("-------------------");
		list.sort(new NameDescending());
		printList(list);
		
		System.out.println("--------------");
		list.sort(new PointAscending());
		printList(list);
		System.out.println("--------------");
		list.sort(new PointDescending());
		printList(list);
	}
	public static ArrayList<Person> addMethod(/*ArrayList<Person> list*/) {//받아주는 매개변수도 제네릭 타입 명시
		ArrayList<Person> list = new ArrayList<Person>();
		list.add(new Person("홍길동", 25, 1537.5));
		list.add(new Person("이순신", 49, 15789.9));
		list.add(new Person("신사임당", 55, 34567.4));
		//list.add(new String("신사임당"); Person 타입이 아니므로 에러
		
		return list;//메소드의 반환형에도 제네릭 명시 ArrayList<Person>
	}
	public static void printList(ArrayList<Person> list) {
		double totalPoint = 0.;
		for(Person p: list) {
			//제네릭이 선언되면 다운캐스팅이 필요 없고 
			//Object가 아닌 Person을 바로 꺼낼 수 있음.
			System.out.println(p);
			totalPoint += p.getPoint();
		}
		System.out.println("포인트총합 : "+ totalPoint);
	}
}
package practice2;
import java.io.*;
public class Book implements Serializable{
	private static final long serialVersionUID = -5031129695851210808L;
	private String bNo;
	private int category; //도서분류코드(1.인문/2.자연과학/3.의료/4.기타)
	private String title;
	private String author;
	
	public Book() {}
	public Book(String bNo, int category, String title, String author) {
		super();
		this.bNo = bNo;
		this.category = category;
		this.title = title;
		this.author = author;
	}
	public String getbNo() {return bNo;}
	public void setbNo(String bNo) {this.bNo = bNo;}
	public int getCategory() {return category;}
	public void setCategory(int category) {this.category = category;}
	public String getTitle() {return title;}
	public void setTitle(String title) {this.title = title;}
	public String getAuthor() {return author;}
	public void setAuthor(String author) {this.author = author;}	
	public String toString() {return this.bNo+" "+this.category+" "+this.title+" "+this.author;}
}

package practice2;
import java.util.*;
public class AscCategory implements Comparator{
	@Override
	public int compare(Object o1,Object o2) {
		int result =0;
		if(o1 instanceof Book && o2 instanceof Book) {
			Book b1 = (Book)o1;
			Book b2 = (Book)o2;
			if(b1.getCategory()>b2.getCategory()) {
				result =1; 
			}
			if(b1.getCategory()<b2.getCategory()) {
				result = -1;
			}
			if(b1.getCategory()==b2.getCategory()) {
				result =0;
			}
			//선생님 코드
			/*result = (b1.getCategory() > b2.getCategory())? 1 : 
				((b1.getCategory() == b2.getCategory())? 0 : -1);*/
		}
		return result;
	}
}

package practice2;
import java.util.*;
public class DescCategory implements Comparator{
	@Override
	public int compare(Object o1,Object o2) {
		int result =0;
		
		if(o1 instanceof Book && o2 instanceof Book) {
			Book b1 = (Book)o1;
			Book b2 = (Book)o2;
			if(b1.getCategory()>b2.getCategory()) {
				result =1; 
			}
			if(b1.getCategory()<b2.getCategory()) {
				result = -1;
			}
			if(b1.getCategory()==b2.getCategory()) {
				result =0;
			}
			//선생님 코드
			/*result = (b1.getCategory() < b2.getCategory())? 1 : 
				((b1.getCategory() == b2.getCategory())? 0 : -1);*/
		}
		return -result;
	}
}

package practice2;
import java.util.*;
public class BookManager {
	private ArrayList<Book> bookList;
	
	public BookManager() {
		bookList = new ArrayList<Book>();
	}
	
	public BookManager(ArrayList<Book> bookList) {
		this.bookList=new ArrayList<Book>(bookList);
	}
	
	public void addBook(Book book) {
		bookList.add(book);
	}
	
	public void deleteBook(int index) {
		bookList.remove(index);
	}
	
	public int searchBook(String bTitle) {
		for(int i=0; i<bookList.size(); i++) {
			//if(((Book)(bookList.get(i))).getTitle().equals(bTitle))
			if(bookList.get(i).getTitle().equals(bTitle) == true){
				//bookList가 제네릭 적용되면 형변환할 필요없음.
				return i;
			}
		}
		return -1;
	}
	public void printBook(int index) {
		System.out.println(bookList.get(index));
	}
	public void displayAll() {
		System.out.println(bookList);
		/*선생님한거
		 * for(int i = 0; i < bookList.size(); i++)
			System.out.println(bookList.get(i));
		 */
	}
	public Book[] sortedBookList() {
		Book[] b = new Book[bookList.size()];
		bookList.sort(new AscCategory());
		bookList.toArray(b);//API내 toArray(T[] a) 활용
		/*for(int i=0; i<bookList.size();i++) {
			b[i] = (Book)(bookList.get(i));
		}
		*/return b;
	}
	public void printBookList(Book[] br) {
		for(Object o : br) {
			System.out.println(o);
		}
	}
}

package practice2;
import java.util.Scanner;
public class TestBookManager {
	private static Scanner sc = new Scanner(System.in);
	public static void menu() {
		BookManager bm = new BookManager();
		do {
			int no;
			System.out.print("*** 도서 관리 프로그램 ***\r\n" + 
					"\r\n" + 
					"	1. 새 도서 추가	//addBook(inputBook() 이 리턴한 객체) 실행\r\n" + 
					"	2. 도서정보 정렬후 출력 //sortedBookList() 실행 \r\n" + 
					"			=> Book[] 리턴받아 printBookList(Book[]) 실행\r\n" + 
					"	3. 도서 삭제	//deleteBook(삭제할 인덱스) 실행\r\n" + 
					"	4. 도서 검색출력	//searchBook(검색할 도서명) 실행 \r\n" + 
					"			=> index 리턴받아 printBook(index) 실행\r\n" + 
					"	5. 전체 출력	//displayAll() 실행\r\n" + 
					"	6. 끝내기 \n 메뉴 선택 : ");
			no = sc.nextInt();
			switch(no) {
			case 1: bm.addBook(inputBook()); break;
			case 2: bm.printBookList(bm.sortedBookList()); break;
			case 3: bm.deleteBook(bm.searchBook(inputBookTitle())); break;
			case 4: bm.printBook(bm.searchBook(inputBookTitle())); break;
			case 5: bm.displayAll(); break;
			case 6: System.out.println("종료하였습니다."); return;
			default : System.out.println("잘못 입력하셨습니다.");
			}
		}while(true);
	}
	public static Book inputBook() {
		Book b = new Book();
		System.out.print("도서번호 입력 : ");
		b.setbNo(sc.next());
		System.out.print("도서분류코드(1.인문/2.자연과학/3.의료/4.기타)");
		b.setCategory(sc.nextInt());
		System.out.print("책제목 입력 : ");
		b.setTitle(sc.next());
		System.out.print("저자 입력 : ");
		b.setAuthor(sc.next());
		return b;
	}
	public static String inputBookTitle() {
		System.out.print("삭제, 또는 검색을 위한 도서 타이틀 입력 : ");
		return sc.next();
	}
	public static void main(String[] args) {
		menu();
	}
}

package test.map;

import java.util.*;
import practice2.Book;
import test.list.Person;

public class TestHashMap {
	public static void main(String[]args) {
		//HashMap test
		HashMap hmap = new HashMap();
		//Map hm = new HashMap(); //다형성 이용
		
		/*값을 입력할 때 쓰틑 메서드
		 * public V put(K key,  V value)
		 * key와 value 모두 객체여야 함
		 * Returns:
the previous value associated with key, or null if there was no mapping for key
		 */
		
		//키 객체와 값 객체 쌍으로 저장함
		hmap.put(/*new String(*/"one"/*)*/, new Person("홍길동",27,1530.5));
		//굳이 new String 할 필요 없음
		hmap.put("23", new Book("23",1,"해리포터5","조앨롱링"));//도서번호를 Key로
		//key는 Set 방식으로 저장(순서 X,중복X)
		//키는 중복되면 안 됨.
		//value는 List 방식으로 저장됨.
		//값은 중복 저장됨.
		
		System.out.println("저장된 객체 수 : "+hmap.size());
		System.out.println(hmap/*.toString()*/);
		/*Abstract HashMap에서 toString() 메소드
		 * 중괄호 안에 Key = Value  형식으로 나옴
		 * public String toString()
Returns a string representation of this map. The string representation consists of a list of key-value mappings in the order returned by the map's entrySet view's iterator, 
enclosed in braces ("{}"). Adjacent mappings are separated by the characters ", " (comma and space). Each key-value mapping is rendered as the key followed by an equals sign ("=") followed by the associated value. Keys and values are converted to strings as by String.valueOf(Object).
		 */
		
		hmap.put("one", "java programming");
		System.out.println(hmap);//one에 value를 덮어씌움.->key 중복X
		
		hmap.put("two",new Book("23",1,"해리포터5","조앨롱링"));
		//value는 List 방식으로 저장 되기 때문에 중복 저장 가능
		System.out.println(hmap);
		
		//맵에 저장된 값 객체 조회시 
		Object value = hmap.get("23");//get()은 Object로 리턴
		System.out.println(value);
		//Object 타입으로는 Book객체의 메소드를 쓸 수 없으니 다운캐스팅
		if(value instanceof Book) {//꺼낸 객체가 Book 이면
			Book b = (Book)value;
			System.out.println(b.getTitle());
			System.out.println(((Book)value).getAuthor());//한 줄에 다운캐스팅
		}
		//Map은 저장 put, 조회 시 get
		
		
		//(중요!!)저장된 정보를 List처럼 연속으로 처리할 때 
	}
}

package test.map;

import java.util.*;

public class TestHashMap2 {

	public static void main(String[] args) {
		// 맵에 저장된 객체정보 연속 처리
		HashMap hmap = new HashMap();
		
		hmap.put("one", new Integer(12345));
		hmap.put(2, "java"); //Auto Boxing
		hmap.put("two","oracle");
		
		System.out.println(hmap);//{2=java, one=12345, two=oracle}
		
		//set은 iterator(), list은 index를 이용하여 연속처리 기능		
		//Map 계열은 저장된 객체에 대한 연속 처리 기능 없음
		//연속 처리하려면
		//Map을 Set이나 Collection으로 바꾸고 나서 Iterator()로 목록만들거나
		//Object[] 로 바꾸어 사용해야 함.
		
		//Map 클래스의 values() 메소드를 사용하면 컬렉션으로 바꿈
		/*Collection<V> values()
		 * Returns:
a collection view of the values contained in this map
			그 이후 value 객체만 컬렉션으로 바꾸고 toarray로 하거나 iterator로 함.
		아니면
		 public Set<K> keySet()
Returns:
a set view of the keys contained in this map

		아니면
		public Set<Map.Entry<K,V>> entrySet()
		Returns:
a set view of the mappings contained in this map
		entry는 key,value 쌍 묶음을 entry라고 하는게 이 한 쌍을 set으로 바꿈
		entry는 내부클래스 
		entry 내부 인터페이스(Map.entry)에서 getKey() , getValue() 사용
		*/
		
		//첫번째, 키들을 Set으로 바꿈
		//키에 대한 목록을 만듦
		Set keys = hmap.keySet(); //key만 Set으로 바꿈
		System.out.println(keys);//[2, one, two]
		Iterator keyIter = keys.iterator();
		System.out.println("---------------------");
		while(keyIter.hasNext()) {
			Object key = keyIter.next(); //next()의 리턴타입이 Object
			Object value = hmap.get(key); //key에 대한 value가 꺼내짐
			System.out.println(key + " = "+value);
		}
		
		System.out.println("목록만들기------------------------");
		//두번째, 값 객체들만 Collection으로 바꾸고 나서, 목록이나 객체배열로 만듦
		Collection values = hmap.values();
		//1. 목록 만들기(값만 처리)
		Iterator valueIter = values.iterator();//값에 대한 목록
		while(valueIter.hasNext()) {
			System.out.println(valueIter.next());
		}
		
		System.out.println("객체배열-------------------");
		//2. 객체배열만들기
		Object[] valueArr = values.toArray();
		for(Object o : valueArr) {
			System.out.println(o);
		}
		
		System.out.println("entrySet-------------");
		//세번째, entrySet() 사용
		//Map.Entry들을 Set으로 바꾸고 엔트리에 대한 목록을 만듦
		//Entry : 키와 값 한쌍
		Set entries = hmap.entrySet();//엔트리들을 set으로 바꿈
		Iterator entryIter = entries.iterator();//엔트리에 대한 목록을 만듦
		while(entryIter.hasNext()) {
			//엔트리는 키와 값을 가지고 있기 때문에 각각 출력가능
			Object obj = entryIter.next();
			Map.Entry entry = (Map.Entry)obj;//외부클래스명.내부클래스명 Map.Entry
			System.out.println(entry.getKey()+"="+entry.getValue());
		}
	}
}

package test.map;

import java.util.*;
import java.util.Map.Entry;

public class TestHashMap3 {

	public static void main(String[] args) {
		// HashMap 실습
		HashMap hmap = new HashMap();
		
		for(int k=1; k<=5;k++) {
			//1~100 사이의 임의의 정수가 키
			//0.0 부터 1.0 미만의 임의의 실수값을 값(value)
			hmap.put(new Random().nextInt(100)+1, Math.random());
			//Auto Boxing 처리 됨
		}
		System.out.println(hmap);
		
		//맵에 기록된 객체 정보 연속 처리
		//첫번째, 키들을 Set으로 Set을 목록으로 바꾸어 처리
		Set keys = hmap.keySet();
		Iterator itKey = keys.iterator();
		while(itKey.hasNext()) {
			System.out.println(itKey.next());
		}
		
		//두번째, 값들을 Collection으로 Collection을 목록으로 처리
		Collection values = hmap.values();
		Iterator itValue = values.iterator();
		while(itValue.hasNext()) {
			System.out.println(itValue.next());
		}
		
		//세번째, Collection을 객체배열
		Object[] hobj = values.toArray();
		for(Object o:hobj) {
			System.out.println(o);
		}
		
		System.out.println("---------");
		//네번째, Map.Entry 들을 Set으로 그 후 목록으로 바꾸어서 처리
		// Map.Entry entry = (Map.Entry) hmap.entrySet();
		Set set = hmap.entrySet();
		Iterator it = set.iterator();
		while(it.hasNext()) {
			Object obj = it.next();
			Map.Entry entry = (Map.Entry)obj;
			System.out.println(entry.getKey()+"="+entry.getValue());
		}
	}
}

package test.map;

import java.util.*;
import practice2.Book;

public class TestMapGeneric {

	public static void main(String[] args) {
		// Map 계열의 제네릭 기능 사용
		//HashMap<String, Book> hmap;
		
		HashMap<String, Book> hmap = getInstance();
		//printMap(hmap);
		//printMap2(hmap);
		printMap3(hmap);
	}
	
	public static HashMap<String, Book> getInstance(){
		HashMap<String, Book> hmap = new HashMap<String, Book>();
		
		
		hmap.put("12", new Book("12",1,"자바정복","홍길동"));
		hmap.put("23", new Book("23",2,"홍길동전","허난설현"));
		hmap.put("37", new Book("37",4,"취미생활","금성출판"));
		//hmap.put(77,"77");//지정된 타입이 아니면 에러
		
		return hmap;
	}
	public static void printMap(HashMap<String, Book> hmap) {
		//첫번째, 키들을 Set으로 바꿈
		Set<String>keys = hmap.keySet();
		//목록 만들기
		Iterator<String> keyIter = keys.iterator();
		while(keyIter.hasNext()) {
			String key = keyIter.next();
			Book b =hmap.get(key);
			System.out.println(key + "=" + b);
			//제네릭을 선언하면 제한한 형태(현재는 String)
			//선언하지 않으면 Object
		}
	}

	public static void printMap2(HashMap<String, Book> hmap) {
		//두번째, 값 객체들을 Collection 으로 바꿈
		Collection<Book> values = hmap.values();
		//목록 만들기
		Iterator<Book> valueIter = values.iterator();
		while(valueIter.hasNext()) {
			Book b= valueIter.next(); //제네릭은 형변환할 필요가 없으
			System.out.println(b);
			//제네릭을 선언하면 제한한 형태(현재는 String)
			//선언하지 않으면 Object
		}
		System.out.println("------------");
		//배열로 바꾸기
		Book[] bar = new Book[values.size()];
		values.toArray(bar);
		for(Book b : bar) {
			System.out.println(b);
		}
	}
	public static void printMap3(HashMap<String, Book> hmap) {
		//첫번째, 키와 값을 묶어서 엔트리들을 Set으로 바꿈
		Set<Map.Entry<String,Book>> entries = hmap.entrySet();
		//Map.Entry를 set하고 Entry들의 제네릭 타입 명시
		
		//목록 만들기
		Iterator<Map.Entry<String, Book>> entryIter = entries.iterator();
		//Map.Entry 들의 Iterator이므로 제네릭도 동일하게 명시
		
		while(entryIter.hasNext()) {
			//엔트리는 키와 값이 있는데 
			Map.Entry<String, Book> entry = entryIter.next();
			String key = entry.getKey();
			Book b = entry.getValue();
			//제네릭 명시 했으니 형변환 필요 없음
			System.out.println(key+"="+b);
		}
	}
	/* 원래 static은 멤버변수나 메소드에 사용할 수 있었는데
	 * public static interface Map.Entry<K,V>
	 * 내부에 있는 거라 static 사용 가능
	 * 
	 */
}

package test.enclose;

public /*static*/ class EnClose {//일반 클래스는 static사용 불가능
	
	public static class In{
		//내부 클래스는 멤버기 때문에private, static 사용가능
		
	}
}

package test.enclose;

public class TestEnClose {

	public static void main(String[] args) {
		EnClose.In;//일단 에러나서 나중에 수업 하기로 함.

	}

}
